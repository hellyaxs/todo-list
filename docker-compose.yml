services:
  traefik:
    image: "traefik:v3.2"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
    ports:
      - "81:80"
      - "8081:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - app_network

  postgres_db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d todo_list_production -h localhost"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

  frontend:
    build:
      context: ./front-end
    deploy:
      replicas: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    networks:
      - app_network
    depends_on:
      - rails_app
    env_file:
      - ./front-end/.env 

  rails_app:
    build:
      context: ./back-end
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: "3.0"
          memory: 1G
        reservations:
          cpus: "2.0"
      restart_policy:
        condition: on-failure
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rails_app.rule=HostRegexp(`api.localhost`)"
      - "traefik.http.routers.rails_app.entrypoints=web"
      - "traefik.http.services.rails_app.loadbalancer.server.port=3000"
    environment:
      RAILS_ENV: test
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      BUNDLE_WITHOUT: ""
    volumes:
      - ./back-end:/rails:cached
    networks:
      - app_network  
    depends_on:
      postgres_db:
        condition: service_healthy
    command: >
      bash -c "
      rm -f /rails/tmp/pids/server.pid &&
      bundle exec rails db:migrate &&
      ./bin/rails server -b 0.0.0.0"    


networks:
  app_network:
    driver: bridge

volumes:
  pg_data:  
