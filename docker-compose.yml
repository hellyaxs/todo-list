services:
  postgres_db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d todo_list_production -h localhost"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

  frontend:
    build:
      context: ./front-end
    container_name: next_app
    ports:
      - "3000:3000"
    networks:
      - app_network
    depends_on:
      - rails_app
    env_file:
      - ./front-end/.env 

  rails_app:
    build:
      context: ./back-end
    container_name: rails_app
    environment:
      RAILS_ENV: test
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      BUNDLE_WITHOUT: ""
    volumes:
      - ./back-end:/rails:cached
      - rails_cache:/rails/tmp/cache
      - rails_logs:/rails/log
    networks:
      - app_network  
    depends_on:
      postgres_db:
        condition: service_healthy
    command: >
      bash -c "
      bundle exec rails db:migrate &&
      ./bin/rails server -b 0.0.0.0"    


networks:
  app_network:
    driver: bridge

volumes:
  pg_data:  
  rails_cache:
  rails_logs:
